/******************************************************************************
 * This file was generated by langium-cli 3.5.0.
 * DO NOT EDIT MANUALLY!
 ******************************************************************************/
/* eslint-disable */
import * as langium from 'langium';
export const OrunmilangTerminals = {
    BEE_NI: /bẹẹni/,
    RARA: /rara/,
    ID: /[a-zA-ZẹọṣàáèéìíòóùúẸỌṢÀÁÈÉÌÍÒÓÙÚ_][a-zA-Z0-9ẹọṣàáèéìíòóùúẸỌṢÀÁÈÉÌÍÒÓÙÚ_]*/,
    NUMBER: /[-]?[0-9]+(\.[0-9]+)?/,
    STRING: /"([^"\\]|\\.)*"|'([^'\\]|\\.)*'/,
    WS: /\s+/,
    ML_COMMENT: /\/\*[^*]*\*+([^/*][^*]*\*+)*\//,
    SL_COMMENT: /\/\/.*/,
};
export const Expression = 'Expression';
export function isExpression(item) {
    return reflection.isInstance(item, Expression);
}
export const NamedElement = 'NamedElement';
export function isNamedElement(item) {
    return reflection.isInstance(item, NamedElement);
}
export const PrimaryExpression = 'PrimaryExpression';
export function isPrimaryExpression(item) {
    return reflection.isInstance(item, PrimaryExpression);
}
export const PrintableValue = 'PrintableValue';
export function isPrintableValue(item) {
    return reflection.isInstance(item, PrintableValue);
}
export const Statement = 'Statement';
export function isStatement(item) {
    return reflection.isInstance(item, Statement);
}
export const AdditiveExpression = 'AdditiveExpression';
export function isAdditiveExpression(item) {
    return reflection.isInstance(item, AdditiveExpression);
}
export const BooleanLiteral = 'BooleanLiteral';
export function isBooleanLiteral(item) {
    return reflection.isInstance(item, BooleanLiteral);
}
export const EqualityExpression = 'EqualityExpression';
export function isEqualityExpression(item) {
    return reflection.isInstance(item, EqualityExpression);
}
export const FunctionCall = 'FunctionCall';
export function isFunctionCall(item) {
    return reflection.isInstance(item, FunctionCall);
}
export const FunctionDeclaration = 'FunctionDeclaration';
export function isFunctionDeclaration(item) {
    return reflection.isInstance(item, FunctionDeclaration);
}
export const IfStatement = 'IfStatement';
export function isIfStatement(item) {
    return reflection.isInstance(item, IfStatement);
}
export const LogicalAndExpression = 'LogicalAndExpression';
export function isLogicalAndExpression(item) {
    return reflection.isInstance(item, LogicalAndExpression);
}
export const LogicalOrExpression = 'LogicalOrExpression';
export function isLogicalOrExpression(item) {
    return reflection.isInstance(item, LogicalOrExpression);
}
export const MultiplicativeExpression = 'MultiplicativeExpression';
export function isMultiplicativeExpression(item) {
    return reflection.isInstance(item, MultiplicativeExpression);
}
export const NumericLiteral = 'NumericLiteral';
export function isNumericLiteral(item) {
    return reflection.isInstance(item, NumericLiteral);
}
export const Parameter = 'Parameter';
export function isParameter(item) {
    return reflection.isInstance(item, Parameter);
}
export const PrintStatement = 'PrintStatement';
export function isPrintStatement(item) {
    return reflection.isInstance(item, PrintStatement);
}
export const Program = 'Program';
export function isProgram(item) {
    return reflection.isInstance(item, Program);
}
export const RelationalExpression = 'RelationalExpression';
export function isRelationalExpression(item) {
    return reflection.isInstance(item, RelationalExpression);
}
export const ReturnStatement = 'ReturnStatement';
export function isReturnStatement(item) {
    return reflection.isInstance(item, ReturnStatement);
}
export const TextLiteral = 'TextLiteral';
export function isTextLiteral(item) {
    return reflection.isInstance(item, TextLiteral);
}
export const VariableAssignment = 'VariableAssignment';
export function isVariableAssignment(item) {
    return reflection.isInstance(item, VariableAssignment);
}
export const VariableDeclaration = 'VariableDeclaration';
export function isVariableDeclaration(item) {
    return reflection.isInstance(item, VariableDeclaration);
}
export const VariableReference = 'VariableReference';
export function isVariableReference(item) {
    return reflection.isInstance(item, VariableReference);
}
export const WhileStatement = 'WhileStatement';
export function isWhileStatement(item) {
    return reflection.isInstance(item, WhileStatement);
}
export class OrunmilangAstReflection extends langium.AbstractAstReflection {
    getAllTypes() {
        return [AdditiveExpression, BooleanLiteral, EqualityExpression, Expression, FunctionCall, FunctionDeclaration, IfStatement, LogicalAndExpression, LogicalOrExpression, MultiplicativeExpression, NamedElement, NumericLiteral, Parameter, PrimaryExpression, PrintStatement, PrintableValue, Program, RelationalExpression, ReturnStatement, Statement, TextLiteral, VariableAssignment, VariableDeclaration, VariableReference, WhileStatement];
    }
    computeIsSubtype(subtype, supertype) {
        switch (subtype) {
            case BooleanLiteral:
            case NumericLiteral:
            case TextLiteral:
            case VariableReference: {
                return this.isSubtype(PrimaryExpression, supertype) || this.isSubtype(PrintableValue, supertype);
            }
            case Expression: {
                return this.isSubtype(PrimaryExpression, supertype);
            }
            case FunctionCall: {
                return this.isSubtype(PrimaryExpression, supertype) || this.isSubtype(PrintableValue, supertype) || this.isSubtype(Statement, supertype);
            }
            case FunctionDeclaration:
            case IfStatement:
            case PrintStatement:
            case ReturnStatement:
            case VariableAssignment:
            case WhileStatement: {
                return this.isSubtype(Statement, supertype);
            }
            case LogicalOrExpression: {
                return this.isSubtype(Expression, supertype);
            }
            case Parameter: {
                return this.isSubtype(NamedElement, supertype);
            }
            case VariableDeclaration: {
                return this.isSubtype(NamedElement, supertype) || this.isSubtype(Statement, supertype);
            }
            default: {
                return false;
            }
        }
    }
    getReferenceType(refInfo) {
        const referenceId = `${refInfo.container.$type}:${refInfo.property}`;
        switch (referenceId) {
            case 'FunctionCall:ref': {
                return FunctionDeclaration;
            }
            case 'VariableAssignment:variable': {
                return VariableDeclaration;
            }
            case 'VariableReference:variable': {
                return NamedElement;
            }
            default: {
                throw new Error(`${referenceId} is not a valid reference id.`);
            }
        }
    }
    getTypeMetaData(type) {
        switch (type) {
            case AdditiveExpression: {
                return {
                    name: AdditiveExpression,
                    properties: [
                        { name: 'left' },
                        { name: 'op', defaultValue: [] },
                        { name: 'rights', defaultValue: [] }
                    ]
                };
            }
            case BooleanLiteral: {
                return {
                    name: BooleanLiteral,
                    properties: [
                        { name: 'bool' }
                    ]
                };
            }
            case EqualityExpression: {
                return {
                    name: EqualityExpression,
                    properties: [
                        { name: 'left' },
                        { name: 'op', defaultValue: [] },
                        { name: 'rights', defaultValue: [] }
                    ]
                };
            }
            case FunctionCall: {
                return {
                    name: FunctionCall,
                    properties: [
                        { name: 'arguments', defaultValue: [] },
                        { name: 'ref' }
                    ]
                };
            }
            case FunctionDeclaration: {
                return {
                    name: FunctionDeclaration,
                    properties: [
                        { name: 'name' },
                        { name: 'parameters', defaultValue: [] },
                        { name: 'statements', defaultValue: [] }
                    ]
                };
            }
            case IfStatement: {
                return {
                    name: IfStatement,
                    properties: [
                        { name: 'condition' },
                        { name: 'elseStatements', defaultValue: [] },
                        { name: 'statements', defaultValue: [] }
                    ]
                };
            }
            case LogicalAndExpression: {
                return {
                    name: LogicalAndExpression,
                    properties: [
                        { name: 'left' },
                        { name: 'rights', defaultValue: [] }
                    ]
                };
            }
            case LogicalOrExpression: {
                return {
                    name: LogicalOrExpression,
                    properties: [
                        { name: 'left' },
                        { name: 'rights', defaultValue: [] }
                    ]
                };
            }
            case MultiplicativeExpression: {
                return {
                    name: MultiplicativeExpression,
                    properties: [
                        { name: 'left' },
                        { name: 'op', defaultValue: [] },
                        { name: 'rights', defaultValue: [] }
                    ]
                };
            }
            case NumericLiteral: {
                return {
                    name: NumericLiteral,
                    properties: [
                        { name: 'value' }
                    ]
                };
            }
            case Parameter: {
                return {
                    name: Parameter,
                    properties: [
                        { name: 'name' }
                    ]
                };
            }
            case PrintStatement: {
                return {
                    name: PrintStatement,
                    properties: [
                        { name: 'value' }
                    ]
                };
            }
            case Program: {
                return {
                    name: Program,
                    properties: [
                        { name: 'statements', defaultValue: [] }
                    ]
                };
            }
            case RelationalExpression: {
                return {
                    name: RelationalExpression,
                    properties: [
                        { name: 'left' },
                        { name: 'op', defaultValue: [] },
                        { name: 'rights', defaultValue: [] }
                    ]
                };
            }
            case ReturnStatement: {
                return {
                    name: ReturnStatement,
                    properties: [
                        { name: 'value' }
                    ]
                };
            }
            case TextLiteral: {
                return {
                    name: TextLiteral,
                    properties: [
                        { name: 'value' }
                    ]
                };
            }
            case VariableAssignment: {
                return {
                    name: VariableAssignment,
                    properties: [
                        { name: 'value' },
                        { name: 'variable' }
                    ]
                };
            }
            case VariableDeclaration: {
                return {
                    name: VariableDeclaration,
                    properties: [
                        { name: 'name' },
                        { name: 'value' }
                    ]
                };
            }
            case VariableReference: {
                return {
                    name: VariableReference,
                    properties: [
                        { name: 'variable' }
                    ]
                };
            }
            case WhileStatement: {
                return {
                    name: WhileStatement,
                    properties: [
                        { name: 'condition' },
                        { name: 'statements', defaultValue: [] }
                    ]
                };
            }
            default: {
                return {
                    name: type,
                    properties: []
                };
            }
        }
    }
}
export const reflection = new OrunmilangAstReflection();
//# sourceMappingURL=ast.js.map